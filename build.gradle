import org.apache.tools.ant.taskdefs.condition.Os


plugins {
    id 'org.javamodularity.moduleplugin' version '1.7.0' apply false
}

allprojects {
    group = 'sjtu.ipads.wtune'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'application'
    apply plugin: 'org.javamodularity.moduleplugin'

    java {
        targetCompatibility = JavaVersion.VERSION_15
    }

    repositories {
        flatDir { dirs("$rootDir/lib") }
        mavenLocal()
        mavenCentral()
    }

    test {
        systemProperty('java.library.path', "$rootDir/lib/")
        environment('LD_LIBRARY_PATH', "$rootDir/lib/")
        useJUnitPlatform()
    }

    dependencies {
        testImplementation('org.junit.jupiter:junit-jupiter-api:5.6.2')
        testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.6.2')
        testRuntimeOnly('org.junit.platform:junit-platform-launcher:1.6.2')
        testRuntimeOnly('org.junit.vintage:junit-vintage-engine:5.6.2')
    }

    task("cleanAll") {
        dependsOn clean
    }

    ext.download = { String url, java.nio.file.Path path, String mod = null ->
        def proxy = "http://ipads:ipads123!2020@202.120.40.85:11235"
        def wd = path.getParent().toAbsolutePath().toString()
        def fileName = path.getFileName().toString()

        if (!path.toFile().exists()) {
            exec {
                workingDir(wd)

                println("downloading $fileName to $wd")
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'powershell', 'Invoke-WebRequest', "'$url'",
                            '-Proxy', "\"$proxy\"",
                            '-OutFile', "$fileName"

                } else {
                    commandLine 'wget', '-e', 'use_proxy=yes',
                            '-e', "http_proxy=$proxy",
                            '-e', "https_proxy=$proxy",
                            '--no-check-certificate',
                            "$url",
                            '-O', "$fileName"

                    if (mod != null)
                        exec {
                            workingDir(wd)
                            commandLine 'chmod', "$mod", "$fileName"
                        }
                }
            }


        } else {
            println("use cached $fileName found in $wd")
        }
    }
}

configurations {
    childJars
}

dependencies {
    subprojects.each {
        childJars project(it.path)
    }
}

task cleanAll {
    subprojects.each {
        dependsOn("${it.name}:cleanAll")
    }
}
