import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'org.javamodularity.moduleplugin' version '1.7.0' apply false
}

allprojects {
    group = 'sjtu.ipads.wtune'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'application'

    sourceCompatibility = JavaVersion.VERSION_15
    targetCompatibility = JavaVersion.VERSION_15


    repositories {
        flatDir { dirs("$rootDir/lib") }
        mavenCentral()
    }

    compileJava {
        doFirst {
            options.compilerArgs += [
                    '--module-path', classpath.asPath
            ]
        }
    }

    run {
        doFirst {
            environment 'LD_LIBRARY_PATH', "$rootDir/lib/"
        }
    }

    application {
        applicationDefaultJvmArgs += ["-Djava.library.path=$rootDir/lib", '--enable-preview']
    }

    test {
        systemProperty('java.library.path', "$rootDir/lib/")
        environment('LD_LIBRARY_PATH', "$rootDir/lib/")
        useJUnitPlatform()
        jvmArgs(['--enable-preview'])
        workingDir(rootDir)
    }

    dependencies {
        testImplementation('org.junit.jupiter:junit-jupiter-api:5.6.2')
        testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.6.2')
        testRuntimeOnly('org.junit.platform:junit-platform-launcher:1.6.2')
        testRuntimeOnly('org.junit.vintage:junit-vintage-engine:5.6.2')
    }

    task("cleanAll") {
        dependsOn clean
    }

    tasks.withType(JavaCompile).each {
        it.options.compilerArgs.add("--enable-preview")
    }

    ext.download = { String url, java.nio.file.Path path, String mod = null ->
        def proxy = "http://ipads:ipads123@202.120.40.82:11235"
        def wd = path.getParent().toAbsolutePath().toString()
        def fileName = path.getFileName().toString()

        if (!path.toFile().exists()) {

            println("downloading $fileName to $wd")
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                exec {
                    workingDir(wd)
                    commandLine 'powershell', 'Invoke-WebRequest', "'$url'",
                            '-Proxy', "\"$proxy\"",
                            '-OutFile', "$fileName"
                }

            } else {
                exec {
                    workingDir(wd)
                    commandLine 'wget', '-e', 'use_proxy=yes',
                            '-e', "http_proxy=$proxy",
                            '-e', "https_proxy=$proxy",
                            '--no-check-certificate',
                            "$url",
                            '-O', "$fileName"
                }

                if (mod != null)
                    exec {
                        workingDir(wd)
                        commandLine 'chmod', "$mod", "$fileName"
                    }
            }

        } else {
            println("use cached $fileName found in $wd")
        }
    }
}

configurations {
    childJars
}

task cleanAll {
    subprojects.each {
        dependsOn("${it.name}:cleanAll")
    }
}
